install.packages("ggplot2")
plot(diamonds$carat, diamonds$price)
library(ggplot2)
plot(diamonds$carat, diamonds$price)
install.packages("dplyr")
Install.packages("dplyr", dependencies=T)
install.packages("dplyr", dependencies = T)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(hflights)
help(hflights)
flights <- tbl_df(hflights)
flights #by default, it prints 10 rows
library(dplyr)
flights <- tbl_df(hflights)
flights #by default, it prints 10 rows
str(flights)
slice(flights, 1:3)
#equivalent to:
flights %>%
slice(1:3)
flights %>%
filter(Month == 1 & DayofMonth == 1)
newSubset <- flights %>%
filter(UniqueCarrier %in% c("AA", "UA"))
newSubset
flights %>%
filter(ArrDelay>30) %>%
mean(ArrDelay)
flights %>%
filter(ArrDelay>30) %>%
mean(ArrDelay, na.rm=TRUE)
flights %>%
filter(UniqueCarrier == 'AA') %>%
filter(ArrDelay>30)
flights %>%
select(Origin) %>%
distinct()
flights %>%
group_by(Dest) %>%
summarize(avg_delay = mean(ArrDelay))
flights %>%
group_by(Dest) %>%
summarize(avg_delay = mean(ArrDelay, na.rm = TRUE))
view(flights)
View(flights)
flights %>%
group_by(UniqueCarrier) %>%
summarize_each(funs(mean(., na.rm=TRUE), sum, n()), Cancelled)  #add n() to get the count of every single block. mean, sum, count for cancelled
help(sample_frac)
help("sample_n"
)
help("sample_n()")
library(dplyr)
help("sample_n()")
library(dplyr)
library(ggplot2)
library(memisc)
library(GGally)
library(ggplot2)
library(memisc)
library(GGally)
library(ggplot2)
library(memisc)
library(GGally)
set.seed(20022012)
data("diamonds")
qplot(data= diamonds, carat, price, xlim = c(0, quantile(diamonds$carat, 0.99)), ylim = c(0, quantile(diamonds$price,0.99)))
diamond_samp = diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp)
graphics.off()
ggpairs(diamond_samp)
diamond_samp = diamonds[sample(1:length(diamonds$price), 100), ]
ggpairs(diamond_samp)
graphics.off()
ggpairs(diamond_samp)
plot1 <- qplot(data = diamonds, price) +
ggtitle('Price')
plot1
plot2 <- qplot(data = diamonds, log10(price)) +
ggtitle('Price (log10)')
plot2
summry(diamonds$price)
summary(diamonds$price)
plot1 <- qplot(data = diamonds, price, binwidth = 500) +
ggtitle('Price')
plot1
library(dplyr)
library(ggplot2)
library(memisc)
library(GGally)
plot1 <- qplot(data = diamonds, price, binwidth = 500) +
ggtitle('Price')
qplot(data = diamonds, log10(price)) +
ggtitle('Price (log10)')
qplot(data = diamonds, price) +
scale_x_log10() +
ggtitle('Price (log10)')
qplot(data = diamonds, price, binwidth = 500) +
ggtitle('Price')
log10(10000)
qplot(data = diamonds, price) +
scale_x_log10()
grid.arrange(p1, p2, ncol=2)
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
plot1 <- qplot(data = diamonds, price, binwidth = 500) +
ggtitle('Price')
p1 <- qplot(data = diamonds, price, binwidth = 500) +
ggtitle('Price')
p2 <- qplot(data = diamonds, log10(price)) +
ggtitle('Price (log10)')
grid.arrange(p1, p2, ncol=2)
p2 <- qplot(data = diamonds, log10(price), bindwidth=0.01) +
ggtitle('Price (log10)')
p2 <- qplot(data = diamonds, log10(price), binwidth=0.01) +
ggtitle('Price (log10)')
grid.arrange(p1, p2, ncol=2)
set.seed(20022012)
diamond_samp = diamonds[sample(1:length(diamonds$price), 100), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
diamond_samp2 = diamonds[sample(1:length(diamonds$price), 100), c(carat,cut,color,clarity,price)]
diamond_samp2 = diamonds[sample(1:length(diamonds$price), 100), c(diamonds$carat,diamonds$cut,diamonds$color,diamonds$clarity,diamonds$price)]
diamond_samp2 = diamonds[sample(1:length(diamonds$price), 100), diamonds$carat:diamonds$price]
diamond_samp2 = diamonds[sample(1:length(diamonds$price), 100), diamonds$carat:diamonds$price]
diamond_samp2 = diamonds[sample(1:length(diamonds$price), 100), diamonds$carat]
diamond_samp2 = diamonds[sample(1:length(diamonds$price), 100), diamonds$price]
diamond_samp2 = diamonds[sample(1:length(diamonds$price), 100), c(1:6)]
ggpairs(diamond_samp2)
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
diamond_samp2 = diamonds[sample(1:length(diamonds$price), 100), c(1:7)]
ggpairs(diamond_samp2)
graphics.off()
setwd("~/Documents/R/Project/Project")
qplot(shares, data=dsmall, geom="histogram",xlim=c(0,40000),ylim=c(0,1500), binwidth = 40)
setwd("~/Documents/R/Project/Project")
library(dplyr)
library(ggplot2)
qplot(shares, data=dsmall, geom="histogram",xlim=c(0,40000),ylim=c(0,1500), binwidth = 40)
data = read.csv("OnlineNewsPopularity.csv")
str(data)
set.seed(27)
dsmall <- sample_n(data, 10000)
qplot(shares, data=dsmall, geom="histogram",xlim=c(0,40000),ylim=c(0,1500), binwidth = 40)
qplot(shares, data=dsmall, geom="histogram",xlim=c(0,40000),ylim=c(0,1500), binwidth = 400)
qplot(shares, data=dsmall, geom="histogram",xlim=c(0,40000),ylim=c(0,1500), binwidth = 500)
qplot(shares, data=dsmall, geom="histogram",xlim=c(0,40000),ylim=c(0,1500), binwidth = 100)
time1 = dsmall %>%
select( weekday_is_monday, weekday_is_tuesday, weekday_is_wednesday, weekday_is_sunday, is_weekend, shares)
summary(lm(data = time1 , shares ~ .))
time1 = dsmall %>%
select( weekday_is_tuesday, weekday_is_wednesday, weekday_is_sunday, is_weekend, shares)
summary(lm(data = time1 , shares ~ .))
library(MASS)
null= lm(data=test, shares ~ 1)  # empty model
full = lm(data=test, shares ~ .) # full model
test = dsmall %>%
select(n_unique_tokens, n_non_stop_unique_tokens, average_token_length, n_tokens_content, num_hrefs, num_self_hrefs, self_reference_min_shares, num_imgs, num_videos, is_weekend , kw_max_avg, kw_avg_avg, LDA_03, LDA_02, global_subjectivity, rate_positive_words, rate_negative_words,  avg_negative_polarity, title_sentiment_polarity, abs_title_subjectivity, shares)
detach("package:MASS")
test = dsmall %>%
select(n_unique_tokens, n_non_stop_unique_tokens, average_token_length, n_tokens_content, num_hrefs, num_self_hrefs, self_reference_min_shares, num_imgs, num_videos, is_weekend , kw_max_avg, kw_avg_avg, LDA_03, LDA_02, global_subjectivity, rate_positive_words, rate_negative_words,  avg_negative_polarity, title_sentiment_polarity, abs_title_subjectivity, shares)
library(MASS)
null= lm(data=test, shares ~ 1)  # empty model
full = lm(data=test, shares ~ .) # full model
step = stepAIC(null, scope=list(lower=null, upper=full), direction = "forward")
lm(formula = shares ~ self_reference_min_shares + kw_avg_avg +
kw_max_avg + global_subjectivity + average_token_length +
num_hrefs + n_unique_tokens + abs_title_subjectivity + title_sentiment_polarity,
data = data)
summary(lm(formula = shares ~ self_reference_min_shares + kw_avg_avg +
kw_max_avg + global_subjectivity + average_token_length +
num_hrefs + n_unique_tokens + abs_title_subjectivity + title_sentiment_polarity,
data = data))
mod = lm(formula = shares ~ self_reference_min_shares + kw_avg_avg +
kw_max_avg + global_subjectivity + average_token_length +
num_hrefs + n_unique_tokens + abs_title_subjectivity + title_sentiment_polarity,
data = data)
summary(mod)
mod = lm(formula = shares ~ self_reference_min_shares + kw_avg_avg +
kw_max_avg + global_subjectivity + average_token_length +
num_hrefs,
data = data)
summary(mod)
summary(data$shares)
model2 = lm(data = regData, formula = sharesPower ~ self_reference_min_shares + kw_avg_avg +
kw_max_avg + global_subjectivity + average_token_length +
num_hrefs + n_unique_tokens)
regData = regData %>%
mutate(sharesPower = shares^-0.3020725)
